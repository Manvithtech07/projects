//bubble Sort
#include<stdio.h>
void bubbleSort(int arr[],int size){
	for(int i=0;i<size-1;i++){
		for(int j=0;j<size-1-i;j++){
			if(arr[j]>arr[j+1]){
				int temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1]=temp;
			}
		}
	}
}
int main(){
	int arr[] = {5,75,6,3,67,2};
	int size = sizeof(arr)/sizeof(arr[0]);
	bubbleSort(arr,size);
	for(int i=0;i<size;i++){
		printf("%d ",arr[i]);
	}
	printf("\n");
	return 0;
}


//Selection sort
#include<stdio.h>
void selectionSort(int arr[],int size){
	for(int i=0;i<size-1;i++){
		int min_index = i;
		for(int j=i+1;j<size;j++){
			if(arr[j]<arr[min_index]){
				min_index = j;
			}
		}
		int temp = arr[min_index];
		arr[min_index]=arr[i];
		arr[i]=temp;
	}
}
int main(){
	int arr[]={4,2,5,7,1,3};
	int size = sizeof(arr)/sizeof(arr[0]);
	selectionSort(arr,size);
	for(int i=0;i<size;i++){
		printf("%d ",arr[i]);
	}
	printf("\n");
}


//Insertion Sort

#include<stdio.h>
void insertionSort(int arr[],int size){
	for(int i=0;i<=size-1;i++){
		int j=i;
		while(j>0 && arr[j-1]>arr[j]){
			int temp = arr[j-1];
			arr[j-1] = arr[j];
			arr[j] = temp;
			j--;
		}
	}
}
int main(){
	int arr[]={4,2,5,7,1,3};
	int size = sizeof(arr)/sizeof(arr[0]);
	insertionSort(arr,size);
	for(int i=0;i<size;i++){
		printf("%d ",arr[i]);
	}
	printf("\n");
}



//quick Sort
#include <stdio.h>
void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}
void quickSort(int arr[], int low, int high) {
    if (low >= high) {
        return;
    }
    int pivot = arr[high];
    int i = (low - 1);

    for (int j = low; j < high; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    int pivotIndex = i + 1;
    quickSort(arr, low, pivotIndex - 1);
    quickSort(arr, pivotIndex + 1, high);
}

int main() {
    int arr[] = {10, 7, 8, 9, 1, 5};
    int size = sizeof(arr) / sizeof(arr[0]);
    quickSort(arr, 0, size - 1);
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
    return 0;
}


//merge Sort

#include <stdio.h>

void merge(int arr[], int l, int m, int r) {
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;

    int L[n1], R[n2];

    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k++] = L[i++];
        } else {
            arr[k++] = R[j++];
        }
    }

    while (i < n1) {
        arr[k++] = L[i++];
    }
    while (j < n2) {
        arr[k++] = R[j++];
    }
}

void mergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

void displayArr(int arr[], int n) {
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

int main() {
    int arr[] = {12, 11, 13, 5, 6, 7};
    int n = sizeof(arr) / sizeof(arr[0]);

    printf("Original array: \n");
    displayArr(arr, n);

    // Call the sorting function
    mergeSort(arr, 0, n - 1);

    printf("\nSorted array: \n");
    displayArr(arr, n);
    
    return 0;
}

